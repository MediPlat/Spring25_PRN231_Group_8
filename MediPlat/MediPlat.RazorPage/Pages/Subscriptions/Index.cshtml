@page
@model MediPlat.RazorPage.Pages.Subscriptions.IndexModel

@{
    ViewData["Title"] = "Index";
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success text-center">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger text-center">
        @TempData["ErrorMessage"]
    </div>
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger text-center">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <p>@error.ErrorMessage</p>
        }
        <script>
            setTimeout(function () {
                window.location.href = "/Auth/Login";
            }, 3000);
        </script>
    </div>
}
<form id="deleteForm" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" id="subscriptionId" />
</form>


<div class="modal fade" id="createSubscriptionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id="createSubscriptionContent"></div>
        </div>
    </div>
</div>


<div class="container py-5">
    <div class="row">
        <div class="col-lg-3">
            <div class="list-group shadow-lg rounded-4">
                <a href="/Admin/Index" class="list-group-item list-group-item-action">Dashboard</a>
                <a href="/Doctors/ManageDoctor" class="list-group-item list-group-item-action">Manage Doctors</a>
                <a href="/Medicines/Index" class="list-group-item list-group-item-action">Manage Medicines</a>
                <a href="/Subscriptions/Index" class="list-group-item list-group-item-action active">Manage Subscriptions</a>
            </div>
        </div>
        <div class="col-lg-9">
            <div class="card shadow-lg rounded-4">
                <div class="card-header bg-primary text-white text-center">
                    <h2>Danh sách Subscription</h2>
                </div>
                <div class="d-flex justify-content-between mb-3">
                    <input type="text" id="searchInput" class="form-control w-25 rounded-4" placeholder="🔍 Tìm kiếm Subscription">
                    <button id="btnAddSubscription" class="btn btn-success rounded-4">
                        <i class="bi bi-plus-circle"></i> Tạo Subscription
                    </button>
                </div>

                <div class="row" id="subscriptionList">
                    @foreach (var subscription in Model.Subscription)
                    {
                        <div class="col-md-4 mb-4">
                            <div class="card shadow-lg text-center">
                                <div class="card-header bg-primary text-white">
                                    <h5 class="mb-0">@subscription.Name</h5>
                                    <small>@subscription.Description</small>
                                    <p><strong>Price:</strong> @subscription.Price VND</p>
                                </div>
                                <div class="card-body">
                                    <p class="text-muted mb-1"><strong>Slot:</strong> @subscription.EnableSlot</p>
                                    <p><strong>Ngày tạo:</strong> @subscription.CreatedDate?.ToString("dd/MM/yyyy")</p>
                                    <p><strong>Cập nhật:</strong> @subscription.UpdateDate?.ToString("dd/MM/yyyy")</p>
                                </div>
                                <div class="card-footer d-flex justify-content-between">
                                    <button class="btn btn-info btn-sm" onclick="editSubscription('@subscription.Id')">Sửa</button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteSubscription('@subscription.Id')">Xóa</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <nav aria-label="Pagination">
                    <ul class="pagination justify-content-center">
                        <li class="page-item"><a class="page-link" href="#">Trước</a></li>
                        <li class="page-item"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">Sau</a></li>
                    </ul>
                </nav>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const modal = new bootstrap.Modal(document.getElementById("createSubscriptionModal"));

        document.querySelector("#btnAddSubscription").addEventListener("click", function () {
            const contentDiv = document.getElementById("createSubscriptionContent");
            contentDiv.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary"></div></div>';

            fetch("/Subscriptions/Create?handler=CreateModal", {
                headers: {
                    "Accept": "text/html",
                    "Cache-Control": "no-cache"
                }
            })
                .then(response => response.text())
                .then(html => {
                    contentDiv.innerHTML = html;
                    modal.show();

                    // Gắn sự kiện submit sau khi nội dung đã được load
                    document.querySelector("#createSubscriptionForm").addEventListener("submit", async function (e) {
                        e.preventDefault(); // Chặn hành vi mặc định

                        const form = e.target;
                        const formData = new FormData(form);

                        const actionUrl = form.getAttribute("action");
                        const response = await fetch(actionUrl, {
                            method: "POST",
                            body: formData
                        });

                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                alert("Thêm subscription thành công!");
                                modal.hide();
                                location.reload();
                            }
                        } else {
                            contentDiv.innerHTML = await response.text(); // Load lại nội dung có lỗi
                        }
                    });
                })
                .catch(() => {
                    contentDiv.innerHTML = '<div class="text-danger text-center">Không thể tải nội dung!</div>';
                });
        });
    });



    document.getElementById("searchInput").addEventListener("input", function () {
        let keyword = this.value.toLowerCase();
        let cards = document.querySelectorAll("#subscriptionList .card");

        cards.forEach(card => {
            let name = card.querySelector("h5").innerText.toLowerCase();
            card.style.display = name.includes(keyword) ? "block" : "none";
        });
    });

    async function deleteSubscription(id) {
        if (confirm("Bạn có chắc muốn xóa Subscription này không?")) {
            const form = document.getElementById("deleteForm");
            document.getElementById("subscriptionId").value = id;
            form.action = `/Subscriptions/Index?handler=Delete&id=${id}`;
            form.submit(); // Gửi form để gọi OnPostDeleteAsync
        }
    }
    function editSubscription(id) {
        alert("Sửa Subscription có ID: " + id);
    }

</script>